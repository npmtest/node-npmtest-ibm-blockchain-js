{"/home/travis/build/npmtest/node-npmtest-ibm-blockchain-js/test.js":"/* istanbul instrument in package npmtest_ibm_blockchain_js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ibm-blockchain-js/lib.npmtest_ibm_blockchain_js.js":"/* istanbul instrument in package npmtest_ibm_blockchain_js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ibm_blockchain_js = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ibm_blockchain_js = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ibm-blockchain-js/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ibm-blockchain-js && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ibm_blockchain_js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ibm_blockchain_js\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ibm_blockchain_js.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ibm_blockchain_js.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ibm_blockchain_js.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ibm_blockchain_js.__dirname + '/lib.npmtest_ibm_blockchain_js.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ibm-blockchain-js/node_modules/ibm-blockchain-js/index.js":"'use strict';\r\n/* global __dirname */\r\n/*******************************************************************************\r\n * Copyright (c) 2016 IBM Corp.\r\n *\r\n * All rights reserved.\r\n *\r\n *******************************************************************************/\r\n \r\n//Load modules\r\nvar fs = require('fs');\r\nvar path = require('path');\r\nvar http = require('http');\r\nvar https = require('https');\r\nvar async = require('async');\r\nvar rest = require(__dirname + '/lib/rest.js');\r\nvar helper = require(__dirname + '/lib/helper.js');\r\nvar AdmZip = require('adm-zip');\r\nvar logger = {log: console.log, error: console.error, debug: console.log, warn: console.log};\r\n\r\nfunction ibc(log_outputs) {\r\n\tif(log_outputs && log_outputs.info) logger.log = log_outputs.info;\t\t//send normal logs here\r\n\tif(log_outputs && log_outputs.error) logger.error = log_outputs.error;\t//send error logs here\r\n\tif(log_outputs && log_outputs.warn) logger.warn = log_outputs.warn;\t\t//send warn logs here\r\n\tif(log_outputs && log_outputs.debug) logger.debug = log_outputs.debug;\t//send debug logs here\r\n}\r\nibc.chaincode = {\r\n\tquery: {},\r\n\tinvoke: {},\r\n\tdeploy: null,\r\n\tdetails:{\r\n\t\tdeployed_name: '',\r\n\t\tfunc: {\r\n\t\t\tinvoke: [],\r\n\t\t\tquery: []\r\n\t\t},\r\n\t\tgit_url: '',\r\n\t\toptions: {},\r\n\t\tpeers: [],\r\n\t\ttimestamp: 0,\r\n\t\tusers: [],\r\n\t\tunzip_dir: '',\r\n\t\tversion: '',\r\n\t\tzip_url: '',\r\n\t}\r\n};\r\nibc.selectedPeer = 0;\r\nibc.q = [];\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//array of unix timestamps, 1 for each unsettled action\r\nibc.lastPoll = 0;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//unix timestamp of the last time we polled\r\nibc.lastBlock = 0;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//last blockheight found\r\nvar tempDirectory = path.join(__dirname, './temp');\t\t\t\t\t\t\t\t\t//\t=./temp - temp directory name\r\n\r\n\r\n// ============================================================================================================================\r\n// EXTERNAL - load() - wrapper on a standard startup flow.\r\n// 1. load network peer data\r\n// 2. register users with security (if present)\r\n// 3. load chaincode and parse\r\n// ============================================================================================================================\r\nibc.prototype.load = function(options, cb){\r\n\tvar errors = [];\r\n\tif(!options.network || !options.network.peers) errors.push('the option \"network.peers\" is required');\r\n\r\n\tif(!options.chaincode || !options.chaincode.zip_url) errors.push('the option \"chaincode.zip_url\" is required');\r\n\tif(!options.chaincode || !options.chaincode.unzip_dir) errors.push('the option \"chaincode.unzip_dir\" is required');\r\n\tif(!options.chaincode || !options.chaincode.git_url) errors.push('the option \"chaincode.git_url\" is required');\r\n\tif(errors.length > 0){\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//check for input errors\r\n\t\tlogger.error('! [ibc-js] Input Error - ibc.load()', errors);\r\n\t\tif(cb) cb(helper.eFmt('load() input error', 400, errors));\r\n\t\treturn;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//get out of dodge\r\n\t}\r\n\r\n\tibc.chaincode = {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//empty it all\r\n\t\t\t\t\tquery: {\r\n\t\t\t\t\t\tread: read\r\n\t\t\t\t\t},\r\n\t\t\t\t\tinvoke: {},\r\n\t\t\t\t\tdeploy: null,\r\n\t\t\t\t\tdetails:{\r\n\t\t\t\t\t\t\t\tdeployed_name: '',\r\n\t\t\t\t\t\t\t\tfunc: {\r\n\t\t\t\t\t\t\t\t\tinvoke: [],\r\n\t\t\t\t\t\t\t\t\tquery: []\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\tgit_url: '',\r\n\t\t\t\t\t\t\t\toptions: options.network.options,\r\n\t\t\t\t\t\t\t\tpeers: [],\r\n\t\t\t\t\t\t\t\ttimestamp: 0,\r\n\t\t\t\t\t\t\t\tusers: [],\r\n\t\t\t\t\t\t\t\tunzip_dir: '',\r\n\t\t\t\t\t\t\t\tversion: '',\r\n\t\t\t\t\t\t\t\tzip_url: '',\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\r\n\t// Step 1\r\n\tibc.prototype.network(options.network.peers, options.network.options);\r\n\r\n\t// Step 2 - optional - only for secure networks\r\n\tif(options.network.users && options.network.users.length > 0){\r\n\t\tibc.chaincode.details.users = options.network.users;\r\n\t\tvar arr = [];\r\n\t\tfor(var i in ibc.chaincode.details.peers){\r\n\t\t\tarr.push(i);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//build the list of indexes\r\n\t\t}\r\n\t\tasync.each(arr, function(i, a_cb) {\r\n\t\t\tif(options.network.users[i]){\t\t\t\t\t\t\t\t\t\t\t//make sure we still have a enrollId for this network\r\n\t\t\t\tvar maxRetry = 2;\r\n\t\t\t\tif(options.network.options && options.network.options.maxRetry) maxRetry = options.network.options.maxRetry;\r\n\t\t\t\tibc.prototype.register(i, options.network.users[i].enrollId, options.network.users[i].enrollSecret, maxRetry, a_cb);\r\n\t\t\t}\r\n\t\t\telse a_cb();\r\n\t\t}, function(err, data){\r\n\t\t\tif(err && cb) return cb(err);\t\t\t\t\t\t\t\t\t\t\t//error already formated\r\n\t\t\telse load_cc();\r\n\t\t});\r\n\t}\r\n\telse{\r\n\t\tibc.chaincode.details.users = [];\r\n\t\tlogger.log('[ibc-js] No membership users found, assuming this is a network w/o membership');\r\n\t\tload_cc();\r\n\t}\r\n\r\n\t// Step 3\r\n\tfunction load_cc(){\r\n\t\tibc.prototype.load_chaincode(options.chaincode, cb);\t\t\t\t\t\t//download/parse and load chaincode\r\n\t}\r\n};\r\n\r\n// ============================================================================================================================\r\n// EXTERNAL - load_chaincode() - load the chaincode and parssssssssse\r\n// 0. Load the github or zip\r\n// 1. Unzip & scan directory for files\r\n// 2. Iter over go files\r\n//\t\t2a. Find what shim version\r\n// \t\t2b. Find the boundaries for Invoke() in the cc\r\n//\t\t\t2c. Grab function names that need to be exported\r\n//\t\t\t2d. Create JS invoke functions for golang functions\r\n// \t\t2e. Find the boundaries for Query() in the cc\r\n//\t\t\t2f. Grab function names that need to be exported\r\n//\t\t\t2g. Create JS query functions for golang functions\r\n// \t\t2h. Find the boundaries for Init() in the cc\r\n//\t\t\t2i. Record function names that need to be exported\r\n// 3. Call callback()\r\n// ============================================================================================================================\r\nibc.prototype.load_chaincode = function(options, cb) {\r\n\tvar errors = [];\r\n\tif(!options.zip_url) errors.push('the option \"zip_url\" is required');\r\n\tif(!options.unzip_dir) errors.push('the option \"unzip_dir\" is required');\r\n\tif(!options.git_url) errors.push('the option \"git_url\" is required');\r\n\tif(errors.length > 0){\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//check for input errors\r\n\t\tlogger.error('! [ibc-js] Input Error - ibc.load_chaincode()', errors);\r\n\t\tif(cb) cb(helper.eFmt('load_chaincode() input error', 400, errors));\r\n\t\treturn;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//get out of dodge\r\n\t}\r\n\r\n\tvar go_funcs = [], cc_suspects = [], cc_invocations = [], cc_queries = [], cc_inits = [];\r\n\tvar found_query = false, found_invoke = false;\r\n\tvar zip_dest = path.join(tempDirectory,  '/file.zip');\t\t\t\t\t\t\t\t//\t=./temp/file.zip\r\n\tvar unzip_dest = path.join(tempDirectory,  '/unzip');\t\t\t\t\t\t\t\t//\t=./temp/unzip\r\n\tvar unzip_cc_dest = path.join(unzip_dest, '/', options.unzip_dir);\t\t\t\t\t//\t=./temp/unzip/DIRECTORY\r\n\tibc.chaincode.details.zip_url = options.zip_url;\r\n\tibc.chaincode.details.unzip_dir = options.unzip_dir;\r\n\tibc.chaincode.details.git_url = options.git_url;\r\n\tibc.chaincode.details.deployed_name = options.deployed_name;\r\n\r\n\tif(!options.deployed_name || options.deployed_name === ''){\t\t\t\t\t\t\t//lets clear and re-download\r\n\t\tibc.prototype.clear(cb_ready);\r\n\t}\r\n\telse{\r\n\t\tcb_ready();\r\n\t}\r\n\r\n\t// check if we already have the chaincode in the local filesystem, else download it\r\n\tfunction cb_ready(){\r\n\t\ttry{fs.mkdirSync(tempDirectory);}\r\n\t\tcatch(e){ }\r\n\t\tfs.access(unzip_cc_dest, cb_file_exists);\t\t\t\t\t\t\t\t\t\t//check if files exist yet\r\n\t\tfunction cb_file_exists(e){\r\n\t\t\tif(e != null){\r\n\t\t\t\tdownload_it(options.zip_url);\t\t\t\t\t\t\t\t\t\t\t//nope, go download it\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tlogger.log('[ibc-js] Found chaincode in local file system');\r\n\t\t\t\tfs.readdir(unzip_cc_dest, cb_got_names);\t\t\t\t\t\t\t\t//yeppers, go use it\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Step 0.\r\n\tfunction download_it(download_url){\r\n\t\tlogger.log('[ibc-js] Downloading zip');\r\n\t\tvar file = fs.createWriteStream(zip_dest);\r\n\t\tvar handleResponse = function(response) {\t\t\t\t\t\t\t\t\t\t//download a .zip of the repo\r\n\t\t\tresponse.pipe(file);\r\n\t\t\tfile.on('finish', function() {\r\n\t\t\t\tif(response.headers.status === '302 Found'){\r\n\t\t\t\t\tlogger.log('redirect...', response.headers.location);\r\n\t\t\t\t\tfile.close();\r\n\t\t\t\t\tdownload_it(response.headers.location);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tfile.close(cb_downloaded);  \t\t\t\t\t\t\t\t\t\t//close() is async\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t};\r\n\t\tvar handleError = function(err) {\r\n\t\t\tlogger.error('! [ibc-js] Download error');\r\n\t\t\tfs.unlink(zip_dest); \t\t\t\t\t\t\t\t\t\t\t\t\t\t//delete the file async\r\n\t\t\tif (cb) cb(helper.eFmt('doad_chaincode() download error', 500, err.message), ibc.chaincode);\r\n\t\t};\r\n\r\n\t\tvar protocol = download_url.split('://')[0];\r\n\t\tif(protocol === 'https') {\t\t\t\t\t\t\t\t\t\t\t\t\t\t//choose http or https\r\n\t\t\thttps.get(download_url, handleResponse).on('error', handleError);\r\n\t\t}\r\n\t\telse{\r\n\t\t\thttp.get(download_url, handleResponse).on('error', handleError);\r\n\t\t}\r\n\t}\r\n\r\n\t// Step 1.\r\n\tfunction cb_downloaded(){\r\n\t\tlogger.log('[ibc-js] Unzipping zip');\r\n\t\ttry{\r\n\t\t\tvar zip = new AdmZip(zip_dest);\t\t\t\t\t\t\t\t\t\t\t\t//unzip the zip we downloaded\r\n\t\t\tzip.extractAllTo(unzip_dest, /*overwrite*/true);\r\n\t\t}\r\n\t\tcatch (err){\r\n\t\t\treturn cb(helper.eFmt('download repo error', 400, err), null);\r\n\t\t}\r\n\t\tlogger.log('[ibc-js] Unzip done');\r\n\t\tfs.readdir(unzip_cc_dest, cb_got_names);\r\n\t\tfs.unlink(zip_dest, function(err) {});\t\t\t\t\t\t\t\t\t\t\t//remove zip file, never used again\r\n\t}\r\n\r\n\t// Step 2.\r\n\tfunction cb_got_names(err, obj){\r\n\t\tlogger.log('[ibc-js] Scanning files', obj);\r\n\t\tvar foundGo = false;\r\n\t\tif(err != null) logger.log('! [ibc-js] fs readdir Error', err);\r\n\t\telse{\r\n\t\t\tfor(var i in obj){\r\n\t\t\t\tif(obj[i].indexOf('.go') >= 0){\t\t\t\t\t\t\t\t\t\t\t//look for GoLang files\r\n\t\t\t\t\tif(!found_invoke || !found_query){\r\n\t\t\t\t\t\tfoundGo = true;\r\n\t\t\t\t\t\tvar file = fs.readFileSync(path.join(unzip_cc_dest, obj[i]), 'utf8');\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t// Step 2a.\r\n\t\t\t\t\t\tibc.chaincode.details.version = find_shim(file);\r\n\t\t\t\t\t\tif(ibc.chaincode.details.version !== ''){\t\t\t\t\t\t//we can't search for functions until we identify the shim version\r\n\t\t\t\t\t\t\tparse_for_invoke(obj[i], file);\r\n\t\t\t\t\t\t\tparse_for_query(obj[i], file);\r\n\t\t\t\t\t\t\tparse_for_init(obj[i], file);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t// done - look for errors/warnings\r\n\t\tvar msg = '';\r\n\t\tif(!foundGo){\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//error no go files\r\n\t\t\tmsg = 'did not find any *.go files, cannot continue';\r\n\t\t\tlogger.error('! [ibc-js] Error - ', msg);\r\n\t\t\tif(cb) return cb(helper.eFmt('load_chaincode() no chaincode', 400, msg), null);\r\n\t\t}\r\n\t\telse{\r\n\t\t\t\r\n\t\t\tif(!found_invoke){\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//warning no run/invoke functions\r\n\t\t\t\tlogger.warn('! [ibc-js] Warning - did not find any invoke functions in chaincode\\'s \"Invoke()\", building a generic \"invoke\"');\r\n\t\t\t\tbuild_invoke_func('invoke');\t\t\t\t\t\t\t\t\t\t\t//this will make chaincode.invoke.invokce(args)\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(!found_query){\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//warning no query functions\r\n\t\t\t\tlogger.warn('! [ibc-js] Warning - did not find any query functions in chaincode\\'s \"Query()\", building a generic \"query\"');\r\n\t\t\t\tbuild_query_func('query');\t\t\t\t\t\t\t\t\t\t\t\t//this will make chaincode.query.query(args)\r\n\t\t\t}\r\n\r\n\t\t\t// Step 3.\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsuccess!\r\n\t\t\tlogger.log('[ibc-js] load_chaincode() finished');\r\n\t\t\tibc.chaincode.details.timestamp = Date.now();\r\n\t\t\tibc.chaincode.deploy = deploy;\r\n\t\t\tif(cb) return cb(null, ibc.chaincode);\t\t\t\t\t\t\t\t\t\t//all done, send it to callback\r\n\t\t}\r\n\t}\r\n\t\r\n\t//regex to find the shim version for this chaincode\r\n\tfunction find_shim(file){\r\n\t\tvar ret = '';\r\n\t\tif(file == null) logger.error('! [ibc-js] fs readfile Error');\r\n\t\telse{\r\n\t\t\tlogger.log('[ibc-js] Parsing file for shim version');\r\n\t\t\t\r\n\t\t\tvar shim_regex = /github.com\\/\\S+\\/shim/g;\t\t\t\t\t\t\t\t\t//find chaincode's shim version\r\n\t\t\tvar result = file.match(shim_regex);\r\n\t\t\tif(result[0]){\r\n\t\t\t\tlogger.log('[ibc-js] Found shim version:', result[0]);\r\n\t\t\t\tret = result[0];\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn ret;\r\n\t}\r\n\r\n\t//look for Invokes\r\n\tfunction parse_for_invoke(name, str){\r\n\t\tif(str == null) logger.error('! [ibc-js] fs readfile Error');\r\n\t\telse{\r\n\t\t\tlogger.log('[ibc-js] Parsing file for invoke functions -', name);\r\n\t\t\t\r\n\t\t\t// Step 2a.\r\n\t\t\tvar go_func_regex = /func\\s+\\(\\w+\\s+\\*SimpleChaincode\\)\\s+(\\w+)/g;\t\t\t//find chaincode's go lang functions\r\n\t\t\tvar result;\r\n\t\t\twhile ( (result = go_func_regex.exec(str)) ) {\r\n\t\t\t\tgo_funcs.push({name: result[1], pos: result.index});\r\n\t\t\t}\r\n\t\t\tvar i_start = 0;\r\n\t\t\tvar i_stop = 0;\r\n\t\t\tvar invokeFunctionName = 'Run';\t\t\t\t\t\t\t\t\t\t\t\t//use Run for obc peer adn Invoke for hyperledger\r\n\t\t\tif(ibc.chaincode.details.version.indexOf('hyperledger/fabric/core/chaincode/shim') >= 0) invokeFunctionName = 'Invoke';\r\n\t\t\t\r\n\t\t\tfor(var i in go_funcs){\r\n\t\t\t\tif(go_funcs[i].name === invokeFunctionName){\r\n\t\t\t\t\ti_start = go_funcs[i].pos;\t\t\t\t\t\t\t\t\t\t\t//find start and stop positions around the \"Invoke()\" function\r\n\t\t\t\t\tif(go_funcs[Number(i) + 1] == null) i_stop = i_start * 2;\t\t\t//invoke is the last function.. so uhhhh just make up a high number\r\n\t\t\t\t\telse i_stop = go_funcs[Number(i) + 1].pos;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(i_start > 0 && i_stop > 0){\r\n\t\t\t\t// Step 2c.\r\n\t\t\t\tvar regex = /function\\s+.=\\s+[\"'](\\w+)[\"']/g;\t\t\t\t\t\t\t//find the exposed chaincode functions in \"Invoke()\"\"\r\n\t\t\t\tvar result2;\r\n\t\t\t\twhile ( (result2 = regex.exec(str)) ) {\r\n\t\t\t\t\tcc_suspects.push({name: result2[1], index: result2.index});\t\t\t//store this for future parsing like query & init\r\n\t\t\t\t\tif(result2.index > i_start && result2.index < i_stop){\t\t\t\t//make sure its inside Invoke()\r\n\t\t\t\t\t\tcc_invocations.push(result2[1]);\t\t\t\t\t\t\t\t//build a list of function names\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\r\n\t\t\t\tif(cc_invocations.length > 0){\r\n\t\t\t\t\tfound_invoke = true;\r\n\t\t\t\t\r\n\t\t\t\t\t// Step 2d.\r\n\t\t\t\t\tibc.chaincode.details.func.invoke = [];\r\n\t\t\t\t\tfor(i in cc_invocations){\t\t\t\t\t\t\t\t\t\t\t//build the rest call for each function\r\n\t\t\t\t\t\tbuild_invoke_func(cc_invocations[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t//look for Queries\r\n\tfunction parse_for_query(name, str){\r\n\t\tif(str == null) logger.error('! [ibc-js] fs readfile Error');\r\n\t\telse{\r\n\t\t\tlogger.log('[ibc-js] Parsing file for query functions -', name);\r\n\t\t\t\r\n\t\t\t// Step 2e.\r\n\t\t\tvar q_start = 0;\r\n\t\t\tvar q_stop = 0;\r\n\t\t\tfor(var i in go_funcs){\r\n\t\t\t\tif(go_funcs[i].name === 'Query'){\r\n\t\t\t\t\tq_start = go_funcs[i].pos;\t\t\t\t\t\t\t\t\t\t\t//find start and stop positions around the \"Query()\" function\r\n\t\t\t\t\tif(go_funcs[Number(i) + 1] == null) q_stop = q_start * 2;\t\t\t//query is the last function.. so uhhhh just make up a high number\r\n\t\t\t\t\telse q_stop = go_funcs[Number(i) + 1].pos;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(q_start > 0 && q_stop > 0){\r\n\t\t\t\t// Step 2f.\r\n\t\t\t\tfor(i in cc_suspects){\r\n\t\t\t\t\tif(cc_suspects[i].index > q_start && cc_suspects[i].index < q_stop){//make sure its inside Query()\r\n\t\t\t\t\t\tcc_queries.push(cc_suspects[i].name);\t\t\t\t\t\t\t//build a list of function names\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\r\n\t\t\t\tif(cc_queries.length > 0){\r\n\t\t\t\t\tfound_query = true;\r\n\t\t\t\t\r\n\t\t\t\t\t// Step 2g.\r\n\t\t\t\t\tibc.chaincode.details.func.query = [];\r\n\t\t\t\t\tfor(i in cc_queries){\t\t\t\t\t\t\t\t\t\t\t\t//build the rest call for each function\r\n\t\t\t\t\t\tbuild_query_func(cc_queries[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t//look for Inits\r\n\tfunction parse_for_init(name, str){\r\n\t\tif(str == null) logger.error('! [ibc-js] fs readfile Error');\r\n\t\telse{\r\n\t\t\t//logger.log('[ibc-js] Parsing file for init functions -', name);\r\n\t\t\t\r\n\t\t\t// Step 2h.\r\n\t\t\tvar q_start = 0;\r\n\t\t\tvar q_stop = 0;\r\n\t\t\tfor(var i in go_funcs){\r\n\t\t\t\tif(go_funcs[i].name === 'Init'){\r\n\t\t\t\t\tq_start = go_funcs[i].pos;\t\t\t\t\t\t\t\t\t\t\t//find start and stop positions around the \"Init()\" function\r\n\t\t\t\t\tif(go_funcs[Number(i) + 1] == null) q_stop = q_start * 2;\t\t\t//init is the last function.. so uhhhh just make up a high number\r\n\t\t\t\t\telse q_stop = go_funcs[Number(i) + 1].pos;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(q_start > 0 && q_stop > 0){\r\n\t\t\t\tfor(i in cc_suspects){\r\n\t\t\t\t\tif(cc_suspects[i].index > q_start && cc_suspects[i].index < q_stop){//make sure its inside Init()\r\n\t\t\t\t\t\tcc_inits.push(cc_suspects[i].name);\t\t\t\t\t\t\t\t//build a list of function names\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\r\n\t\t\t\tif(cc_inits.length > 0){\r\n\t\t\t\t\r\n\t\t\t\t\t// Step 2i.\r\n\t\t\t\t\tibc.chaincode.details.func.init = [];\r\n\t\t\t\t\tfor(i in cc_inits){\t\t\t\t\t\t\t\t\t\t\t\t\t//no rest call to build, just remember it in 'details'\r\n\t\t\t\t\t\tibc.chaincode.details.func.init.push(name);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n};\r\n\r\n// ============================================================================================================================\r\n// EXTERNAL - network() - setup network configuration to hit a rest peer\r\n// ============================================================================================================================\r\nibc.prototype.network = function(arrayPeers, options){\r\n\tvar errors = [];\r\n\tibc.chaincode.details.options = {quiet: true, timeout: 60000, tls: true};\t\t\t//defaults\r\n\t\r\n\tif(!arrayPeers || arrayPeers.constructor !== Array) errors.push('network input arg should be array of peer objects');\r\n\t\r\n\tif(options){\r\n\t\tif(options.quiet === true || options.quiet === false) ibc.chaincode.details.options.quiet = options.quiet;\t//optional fields\r\n\t\tif(!isNaN(options.timeout)) ibc.chaincode.details.options.timeout = Number(options.timeout);\r\n\t\tif(options.tls === true || options.tls === false) ibc.chaincode.details.options.tls = options.tls;\r\n\t}\r\n\t\r\n\tfor(var i in arrayPeers){\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//check for errors in peers input obj\r\n\t\tif(!arrayPeers[i].id) \t\terrors.push('peer ' + i + ' is missing the field id');\r\n\t\tif(!arrayPeers[i].api_host) errors.push('peer ' + i + ' is missing the field api_host');\r\n\t\tif(options && options.tls === false){\r\n\t\t\tif(!arrayPeers[i].api_port) errors.push('peer ' + i + ' is missing the field api_port');\r\n\t\t}\r\n\t\telse{\r\n\t\t\tif(!arrayPeers[i].api_port_tls) errors.push('peer ' + i + ' is missing the field api_port_tls');\r\n\t\t}\r\n\t}\r\n\r\n\tif(errors.length > 0){\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//check for input errors\r\n\t\tlogger.error('! [ibc-js] Input Error - ibc.network()', errors);\r\n\t}\r\n\telse{\r\n\t\tibc.chaincode.details.peers = [];\r\n\t\tfor(i in arrayPeers){\r\n\t\t\tvar pos = arrayPeers[i].id.indexOf('_') + 1;\r\n\t\t\tvar temp = \t{\r\n\t\t\t\t\t\t\tname: arrayPeers[i].id.substring(pos) + '-' + arrayPeers[i].id.substring(0, 12) + '...:' + arrayPeers[i].api_port_tls,\r\n\t\t\t\t\t\t\tapi_host: arrayPeers[i].api_host,\r\n\t\t\t\t\t\t\tapi_port: arrayPeers[i].api_port,\r\n\t\t\t\t\t\t\tapi_port_tls:  arrayPeers[i].api_port_tls,\r\n\t\t\t\t\t\t\tid: arrayPeers[i].id,\r\n\t\t\t\t\t\t\ttls: ibc.chaincode.details.options.tls\r\n\t\t\t\t\t\t};\r\n\t\t\tif(options && options.tls === false){\t\t\t\t\t\t\t\t\t\t//if not tls rebuild a few things\r\n\t\t\t\ttemp.name = arrayPeers[i].id.substring(pos) + '-' + arrayPeers[i].id.substring(0, 12) + '...:' + arrayPeers[i].api_port;\r\n\t\t\t}\r\n\t\r\n\t\t\tlogger.log('[ibc-js] Peer: ', temp.name);\t\t\t\t\t\t\t\t\t//print the friendly name\r\n\t\t\tibc.chaincode.details.peers.push(temp);\r\n\t\t}\r\n\r\n\t\trest.init({\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//load default values for rest call to peer\r\n\t\t\t\t\thost: ibc.chaincode.details.peers[0].api_host,\r\n\t\t\t\t\tport: pick_port(0),\r\n\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t\t\t\t\t'Accept': 'application/json',\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\tssl: ibc.chaincode.details.peers[0].tls,\r\n\t\t\t\t\ttimeout: ibc.chaincode.details.options.timeout,\r\n\t\t\t\t\tquiet: ibc.chaincode.details.options.quiet\r\n\t\t}, logger);\r\n\t}\r\n};\r\n\r\n//pick tls or non-tls port based on the tls setting\r\nfunction pick_port(pos){\r\n\tvar port = ibc.chaincode.details.peers[pos].api_port_tls;\r\n\tif(ibc.chaincode.details.peers[pos].tls === false) port = ibc.chaincode.details.peers[pos].api_port;\r\n\treturn port;\r\n}\r\n\r\n\r\n// ============================================================================================================================\r\n// EXTERNAL - switchPeer() - switch the default peer to hit\r\n// ============================================================================================================================\r\nibc.prototype.switchPeer = function(index) {\r\n\tif(ibc.chaincode.details.peers[index]) {\r\n\t\trest.init({\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//load default values for rest call to peer\r\n\t\t\t\t\thost: ibc.chaincode.details.peers[index].api_host,\r\n\t\t\t\t\tport: pick_port(index),\r\n\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t\t\t\t\t'Accept': 'application/json',\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\tssl: ibc.chaincode.details.peers[index].tls,\r\n\t\t\t\t\ttimeout: ibc.chaincode.details.options.timeout,\r\n\t\t\t\t\tquiet: ibc.chaincode.details.options.quiet\r\n\t\t});\r\n\t\tibc.selectedPeer = index;\r\n\t\treturn true;\r\n\t} else {\r\n\t\treturn false;\r\n\t}\r\n};\r\n\r\n// ============================================================================================================================\r\n// EXTERNAL - save() - write chaincode details to a json file\r\n// ============================================================================================================================\r\nibc.prototype.save =  function(dir, cb){\r\n\tvar errors = [];\r\n\tif(!dir) errors.push('the option \"dir\" is required');\r\n\tif(errors.length > 0){\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//check for input errors\r\n\t\tlogger.error('[ibc-js] Input Error - ibc.save()', errors);\r\n\t\tif(cb) cb(helper.eFmt('save() input error', 400, errors));\r\n\t}\r\n\telse{\r\n\t\tvar fn = 'chaincode.json';\t\t\t\t\t\t\t\t\t\t\t\t\t\t//default name\r\n\t\tif(ibc.chaincode.details.deployed_name) fn = ibc.chaincode.details.deployed_name + '.json';\r\n\t\tvar dest = path.join(dir, fn);\r\n\t\tfs.writeFile(dest, JSON.stringify({details: ibc.chaincode.details}), function(e){\r\n\t\t\tif(e != null){\r\n\t\t\t\tlogger.warn('[ibc-js] ibc.save() warning', e);\r\n\t\t\t\tif(cb) cb(helper.eFmt('save() fs write error', 500, e), null);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif(cb) cb(null, null);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n};\r\n\r\n// ============================================================================================================================\r\n// EXTERNAL - clear() - clear the temp directory\r\n// ============================================================================================================================\r\nibc.prototype.clear =  function(cb){\r\n\tlogger.log('[ibc-js] removing temp dir');\r\n\thelper.removeThing(tempDirectory, cb);\t\t\t\t\t\t\t\t\t\t\t//remove everything in this directory\r\n};\r\n\r\n//============================================================================================================================\r\n// EXTERNAL chain_stats() - get blockchain stats\r\n//============================================================================================================================\r\nibc.prototype.chain_stats =  function(cb){\r\n\tvar options = {path: '/chain'};\t\t\t\t\t\t\t\t\t\t\t\t\t//very simple API, get chainstats!\r\n\r\n\trest.get(options, null, function(statusCode, data){\r\n\t\tif(statusCode != null){\r\n\t\t\tlogger.error('[ibc-js] Chain Stats - failure:', statusCode, data);\r\n\t\t\tif(cb) cb(helper.eFmt('chain_stats() error', statusCode, data), null);\r\n\t\t}\r\n\t\telse{\r\n\t\t\tlogger.log('[ibc-js] Chain Stats - success');\r\n\t\t\tif(cb) cb(null, data);\r\n\t\t}\r\n\t});\r\n};\r\n\r\n//============================================================================================================================\r\n// EXTERNAL block_stats() - get block meta data\r\n//============================================================================================================================\r\nibc.prototype.block_stats =  function(id, cb){\r\n\tvar options = {path: '/chain/blocks/' + id};\t\t\t\t\t\t\t\t\t//i think block IDs start at 0, height starts at 1, fyi\r\n\r\n\trest.get(options, null, function(statusCode, data){\r\n\t\tif(statusCode != null){\r\n\t\t\tlogger.error('[ibc-js] Block Stats ', id , '- failure:', statusCode);\r\n\t\t\tif(cb) cb(helper.eFmt('block_stats() error', statusCode, data), null);\r\n\t\t}\r\n\t\telse{\r\n\t\t\tlogger.log('[ibc-js] Block Stats ', id , '- success');\r\n\t\t\tif(cb) cb(null, data);\r\n\t\t}\r\n\t});\r\n};\r\n\r\n//============================================================================================================================\r\n//read() - read generic variable from chaincode state - ! [legacy. do not use it anymore 4/1/2016]\r\n//============================================================================================================================\r\nfunction read(args, enrollId, cb){\r\n\tif(typeof enrollId === 'function'){ \t\t\t\t\t\t\t\t\t\t\t//if cb is in 2nd param use known enrollId\r\n\t\tcb = enrollId;\r\n\t\tenrollId = ibc.chaincode.details.peers[ibc.selectedPeer].enrollId;\r\n\t}\r\n\tif(enrollId == null) {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//if enrollId not provided, use known valid one\r\n\t\tenrollId = ibc.chaincode.details.peers[ibc.selectedPeer].enrollId;\r\n\t}\r\n\r\n\tvar options = {path: '/chaincode'};\r\n\tvar body = {\r\n\t\t\t\tjsonrpc: '2.0',\r\n\t\t\t\tmethod: 'query',\r\n\t\t\t\tparams: {\r\n\t\t\t\t\ttype: 1,\r\n\t\t\t\t\tchaincodeID:{\r\n\t\t\t\t\t\tname: ibc.chaincode.details.deployed_name\r\n\t\t\t\t\t},\r\n\t\t\t\t\tctorMsg: {\r\n\t\t\t\t\t\tfunction: 'query',\r\n\t\t\t\t\t\targs: args\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsecureContext: enrollId\r\n\t\t\t\t},\r\n\t\t\t\tid: Date.now()\r\n\t};\r\n\r\n\trest.post(options, null, body, function(statusCode, data){\r\n\t\tif(statusCode != null){\r\n\t\t\tlogger.error('[ibc-js] (Read) - failure:', statusCode);\r\n\t\t\tif(cb) cb(helper.eFmt('read() error', statusCode, data), null);\r\n\t\t}\r\n\t\telse{\r\n\t\t\tlogger.log('[ibc-js] (Read) - success:', data);\r\n\t\t\tif(cb){\r\n\t\t\t\tif(data.error) cb(helper.eFmt('query() resp error', 400, data.error), null);\r\n\t\t\t\telse if(data.result) cb(null, data.result.message);\r\n\t\t\t\telse cb(null, data.OK);\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n}\r\n\r\n//============================================================================================================================\r\n// EXTERNAL - register() - register a enrollId with a peer (only for a blockchain network with membership)\r\n//============================================================================================================================\r\nibc.prototype.register = function(index, enrollId, enrollSecret, maxRetry, cb) {\r\n\tregister(index, enrollId, enrollSecret, maxRetry, 1, cb);\r\n};\r\n\r\nfunction register(index, enrollId, enrollSecret, maxRetry, attempt, cb){\r\n\tlogger.log('[ibc-js] Registering ', ibc.chaincode.details.peers[index].name, ' w/enrollId - ' + enrollId);\r\n\tvar options = {\r\n\t\tpath: '/registrar',\r\n\t\thost: ibc.chaincode.details.peers[index].api_host,\r\n\t\tport: pick_port(index),\r\n\t\tssl: ibc.chaincode.details.peers[index].tls\r\n\t};\r\n\r\n\tvar body = \t{\r\n\t\t\t\t\tenrollId: enrollId,\r\n\t\t\t\t\tenrollSecret: enrollSecret\r\n\t\t\t\t};\r\n\trest.post(options, null, body, function(statusCode, data){\r\n\t\tif(statusCode != null){\r\n\t\t\tlogger.error('[ibc-js] Register - failure x' + attempt + ' :', enrollId, statusCode);\r\n\t\t\tif(attempt <= maxRetry){\t\t\t\t\t\t\t\t\t\t\t\t\t//lets try again after a short delay, maybe the peer is still starting\r\n\t\t\t\tlogger.log('[ibc-js] \\tgoing to try to register again in 30 secs');\r\n\t\t\t\tsetTimeout(function(){register(index, enrollId, enrollSecret, maxRetry, ++attempt, cb);}, 30000);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tif(cb) cb(helper.eFmt('register() error', statusCode, data), null);\t\t//give up\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlogger.log('[ibc-js] Registration success x' + attempt + ' :', enrollId);\r\n\t\t\tibc.chaincode.details.peers[index].enrollId = enrollId;\t\t\t\t\t\t//remember a valid enrollId for this peer\r\n\t\t\tif(cb) cb(null, data);\r\n\t\t}\r\n\t});\r\n}\r\n\r\n//============================================================================================================================\r\n// EXTERNAL - unregister() - unregister a enrollId from a peer (only for a blockchain network with membership), enrollId can no longer make transactions\r\n//============================================================================================================================\r\nibc.prototype.unregister = function(index, enrollId, cb) {\r\n\tlogger.log('[ibc-js] Unregistering ', ibc.chaincode.details.peers[index].name, ' w/enrollId - ' + enrollId);\r\n\tvar options = {\r\n\t\tpath: '/registrar/' + enrollId,\r\n\t\thost: ibc.chaincode.details.peers[index].api_host,\r\n\t\tport: pick_port(index),\r\n\t\tssl: ibc.chaincode.details.peers[index].tls\r\n\t};\r\n\r\n\trest.delete(options, null, null, function(statusCode, data){\r\n\t\tif(statusCode != null){\r\n\t\t\tlogger.log('[ibc-js] Unregistering - failure:', enrollId, statusCode);\r\n\t\t\tif(cb) cb(helper.eFmt('unregister() error', statusCode, data), null);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlogger.log('[ibc-js] Unregistering success:', enrollId);\r\n\t\t\tibc.chaincode.details.peers[index].enrollId = null;\t\t\t\t\t\t\t\t//unremember a valid enrollId for this peer\r\n\t\t\tif(cb) cb(null, data);\r\n\t\t}\r\n\t});\r\n};\r\n\r\n//============================================================================================================================\r\n// EXTERNAL - check_register() - check if a enrollId is registered or not with a peer\r\n//============================================================================================================================\r\nibc.prototype.check_register = function(index, enrollId, cb) {\r\n\tlogger.log('[ibc-js] Checking ', ibc.chaincode.details.peers[index].name, ' w/enrollId - ' + enrollId);\r\n\tvar options = {\r\n\t\tpath: '/registrar/' + enrollId,\r\n\t\thost: ibc.chaincode.details.peers[index].api_host,\r\n\t\tport: pick_port(index),\r\n\t\tssl: ibc.chaincode.details.peers[index].tls\r\n\t};\r\n\r\n\trest.get(options, null, function(statusCode, data){\r\n\t\tif(statusCode != null){\r\n\t\t\tlogger.error('[ibc-js] Check Register - failure:', enrollId, statusCode);\r\n\t\t\tif(cb) cb(helper.eFmt('check_register() error', statusCode, data), null);\r\n\t\t}\r\n\t\telse{\r\n\t\t\tlogger.log('[ibc-js] Check Register success:', enrollId);\r\n\t\t\tif(cb) cb(null, data);\r\n\t\t}\r\n\t});\r\n};\r\n\r\n//============================================================================================================================\r\n//deploy() - deploy chaincode and call a cc function\r\n//============================================================================================================================\r\nfunction deploy(func, args, deploy_options, enrollId, cb){\r\n\tif(typeof enrollId === 'function'){ \t\t\t\t\t\t\t\t\t\t\t//if cb is in 2nd param use known enrollId\r\n\t\tcb = enrollId;\r\n\t\tenrollId = ibc.chaincode.details.peers[ibc.selectedPeer].enrollId;\r\n\t}\r\n\tif(enrollId == null) {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//if enrollId not provided, use known valid one\r\n\t\tenrollId = ibc.chaincode.details.peers[ibc.selectedPeer].enrollId;\r\n\t}\r\n\r\n\tlogger.log('[ibc-js] Deploy Chaincode - Starting');\r\n\tlogger.log('[ibc-js] \\tfunction:', func, ', arg:', args);\r\n\tlogger.log('\\n\\n\\t Waiting...');\t\t\t\t\t\t\t\t\t\t\t\t//this can take awhile\r\n\t\r\n\tvar options = {}, body = {};\r\n\toptions = {path: '/chaincode'};\r\n\tbody = \t{\r\n\t\tjsonrpc: '2.0',\r\n\t\tmethod: 'deploy',\r\n\t\tparams: {\r\n\t\t\ttype: 1,\r\n\t\t\tchaincodeID:{\r\n\t\t\t\tpath: ibc.chaincode.details.git_url\r\n\t\t\t},\r\n\t\t\tctorMsg: {\r\n\t\t\t\tfunction: func,\r\n\t\t\t\targs: args\r\n\t\t\t},\r\n\t\t\tsecureContext: enrollId\r\n\t\t},\r\n\t\tid: Date.now()\r\n\t};\r\n\r\n\trest.post(options, null, body, function(statusCode, data){\r\n\t\t// ---- Failure ---- ///\r\n\t\tif(statusCode != null){\r\n\t\t\tlogger.error('[ibc-js] deploy - failure:', statusCode);\r\n\t\t\tif(cb) cb(helper.eFmt('deploy() error', statusCode, data), null);\r\n\t\t}\r\n\r\n\t\t// ---- Success ---- //\r\n\t\telse{\r\n\t\t\tif(data.result && ibc.chaincode.details.version.indexOf('hyperledger/fabric/core/chaincode/shim') >= 0){//hyperledger response\r\n\t\t\t\tibc.chaincode.details.deployed_name = data.result.message;\r\n\t\t\t}\r\n\t\t\telse ibc.chaincode.details.deployed_name = data.message;\t\t\t\t\t//obc-peer response\r\n\t\t\t\r\n\t\t\tif(!ibc.chaincode.details.deployed_name || ibc.chaincode.details.deployed_name.length < 32){\r\n\t\t\t\tibc.chaincode.details.deployed_name = '';\t\t\t\t\t\t\t\t//doesnt look right, let code below catch error\r\n\t\t\t}\r\n\r\n\t\t\tif(ibc.chaincode.details.deployed_name === ''){\r\n\t\t\t\tlogger.error('\\n\\n\\t deploy resp error - there is no chaincode hash name in response:', data);\r\n\t\t\t\tif(cb) cb(helper.eFmt('deploy() error no cc name', 502, data), null);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tibc.prototype.save(tempDirectory);\t\t\t\t\t\t\t\t\t\t//save it to known place so we remember the cc name\r\n\t\t\t\tif(deploy_options && deploy_options.save_path != null) {\t\t\t\t//save it to custom route\r\n\t\t\t\t\tibc.prototype.save(deploy_options.save_path);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(cb){\r\n\t\t\t\t\tvar wait_ms = 45000;\t\t\t\t\t\t\t\t\t\t\t\t//default wait after deploy, peer may still be starting\r\n\t\t\t\t\tif(deploy_options && deploy_options.delay_ms && Number(deploy_options.delay_ms)) wait_ms = deploy_options.delay_ms;\r\n\t\t\t\t\tlogger.log('\\n\\n\\t deploy success [waiting another', (wait_ms / 1000) ,'seconds]');\r\n\t\t\t\t\tlogger.log('\\t', ibc.chaincode.details.deployed_name, '\\n');\r\n\t\t\t\t\t\r\n\t\t\t\t\tsetTimeout(function(){\r\n\t\t\t\t\t\tlogger.log('[ibc-js] Deploy Chaincode - Complete');\r\n\t\t\t\t\t\tcb(null, data);\r\n\t\t\t\t\t}, wait_ms);\t\t\t\t\t\t\t\t\t\t\t\t\t\t//wait extra long, not always ready yet\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n}\r\n\r\n//============================================================================================================================\r\n//heart_beat() - interval function to poll against blockchain height (has fast and slow mode)\r\n//============================================================================================================================\r\nvar slow_mode = 10000;\r\nvar fast_mode = 500;\r\nfunction heart_beat(){\r\n\tif(ibc.lastPoll + slow_mode < Date.now()){\t\t\t\t\t\t\t\t\t//slow mode poll\r\n\t\t//logger.log('[ibc-js] Its been awhile, time to poll');\r\n\t\tibc.lastPoll = Date.now();\r\n\t\tibc.prototype.chain_stats(cb_got_stats);\r\n\t}\r\n\telse{\r\n\t\tfor(var i in ibc.q){\r\n\t\t\tvar elasped = Date.now() - ibc.q[i];\r\n\t\t\tif(elasped <= 3000){\t\t\t\t\t\t\t\t\t\t\t\t//fresh unresolved action, fast mode!\r\n\t\t\t\tlogger.log('[ibc-js] Unresolved action, must poll');\r\n\t\t\t\tibc.lastPoll = Date.now();\r\n\t\t\t\tibc.prototype.chain_stats(cb_got_stats);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\t//logger.log('[ibc-js] Expired, removing');\r\n\t\t\t\tibc.q.pop();\t\t\t\t\t\t\t\t\t\t\t\t\t//expired action, remove it\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction cb_got_stats(e, stats){\r\n\tif(e == null){\r\n\t\tif(stats && stats.height){\r\n\t\t\tif(ibc.lastBlock != stats.height) {\t\t\t\t\t\t\t\t\t//this is a new block!\r\n\t\t\t\tlogger.log('[ibc-js] New block!', stats.height);\r\n\t\t\t\tibc.lastBlock  = stats.height;\r\n\t\t\t\tibc.q.pop();\t\t\t\t\t\t\t\t\t\t\t\t\t//action is resolved, remove\r\n\t\t\t\tif(ibc.monitorFunction) ibc.monitorFunction(stats);\t\t\t\t//call the user's callback\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n//============================================================================================================================\r\n// EXTERNAL- monitor_blockheight() - exposed function that user can use to get callback when any new block is written to the chain\r\n//============================================================================================================================\r\nibc.prototype.monitor_blockheight = function(cb) {\t\t\t\t\t\t\t\t//hook in your own function, triggers when chain grows\r\n\tsetInterval(function(){heart_beat();}, fast_mode);\r\n\tibc.monitorFunction = cb;\t\t\t\t\t\t\t\t\t\t\t\t\t//store it\r\n};\r\n\r\n//============================================================================================================================\r\n// EXTERNAL- get_transaction() - exposed function to find a transaction based on its UDID\r\n//============================================================================================================================\r\nibc.prototype.get_transaction = function(udid, cb) {\r\n\tvar options = {\r\n\t\tpath: '/transactions/' + udid\r\n\t};\r\n\r\n\trest.get(options, null, function(statusCode, data){\r\n\t\tif(statusCode != null){\r\n\t\t\tlogger.error('[ibc-js] Get Transaction - failure:', statusCode);\r\n\t\t\tif(cb) cb(helper.eFmt('read() error', statusCode, data), null);\r\n\t\t}\r\n\t\telse{\r\n\t\t\tlogger.log('[ibc-js] Get Transaction - success:', data);\r\n\t\t\tif(cb) cb(null, data);\r\n\t\t}\r\n\t});\r\n};\r\n\r\n//============================================================================================================================\r\n//\t\t\t\t\t\t\t\t\t\t\t\t\tHelper Functions() \r\n//============================================================================================================================\r\n//build_invoke_func() - create JS function that calls the custom goLang function in the chaincode\r\n//==================================================================\r\nfunction build_invoke_func(name){\r\n\tif(ibc.chaincode.invoke[name] != null){\t\t\t\t\t\t\t\t\t\t\t//skip if already exists\r\n\t\t//logger.log('[ibc-js] \\t skip, func', name, 'already exists');\r\n\t}\r\n\telse {\r\n\t\tlogger.log('[ibc-js] Found cc invoke function: ', name);\r\n\t\tibc.chaincode.details.func.invoke.push(name);\r\n\t\tibc.chaincode.invoke[name] = function(args, enrollId, cb){\t\t\t\t\t//create the function in the chaincode obj\r\n\t\t\tif(typeof enrollId === 'function'){ \t\t\t\t\t\t\t\t\t//if cb is in 2nd param use known enrollId\r\n\t\t\t\tcb = enrollId;\r\n\t\t\t\tenrollId = ibc.chaincode.details.peers[ibc.selectedPeer].enrollId;\r\n\t\t\t}\r\n\t\t\tif(enrollId == null) {\t\t\t\t\t\t\t\t\t\t\t\t\t//if enrollId not provided, use known valid one\r\n\t\t\t\tenrollId = ibc.chaincode.details.peers[ibc.selectedPeer].enrollId;\r\n\t\t\t}\r\n\r\n\t\t\tvar options = {}, body = {};\r\n\t\t\toptions = {path: '/chaincode'};\r\n\t\t\tbody = {\r\n\t\t\t\tjsonrpc: '2.0',\r\n\t\t\t\tmethod: 'invoke',\r\n\t\t\t\tparams: {\r\n\t\t\t\t\ttype: 1,\r\n\t\t\t\t\tchaincodeID:{\r\n\t\t\t\t\t\tname: ibc.chaincode.details.deployed_name\r\n\t\t\t\t\t},\r\n\t\t\t\t\tctorMsg: {\r\n\t\t\t\t\t\tfunction: name,\r\n\t\t\t\t\t\targs: args\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsecureContext: enrollId\r\n\t\t\t\t},\r\n\t\t\t\tid: Date.now()\r\n\t\t\t};\r\n\t\t\trest.post(options, null, body, function(statusCode, data){\r\n\t\t\t\tif(statusCode != null){\r\n\t\t\t\t\tlogger.error('[ibc-js]', name, ' - failure:', statusCode, data);\r\n\t\t\t\t\tif(cb) cb(helper.eFmt('invoke() error', statusCode, data), null);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tlogger.log('[ibc-js]', name, ' - success:', data);\r\n\t\t\t\t\tibc.q.push(Date.now());\t\t\t\t\t\t\t\t\t\t\t\t//new action, add it to queue\r\n\t\t\t\t\tif(cb) cb(null, data);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t};\r\n\t}\r\n}\r\n\r\n//==================================================================\r\n//build_query_func() - create JS function that calls the custom goLang function in the chaincode\r\n//==================================================================\r\nfunction build_query_func(name){\r\n\tif(ibc.chaincode.query[name] != null && name !== 'read'){\t\t\t\t\t\t//skip if already exists\r\n\t\t//logger.log('[ibc-js] \\t skip, func', name, 'already exists');\r\n\t}\r\n\telse {\r\n\t\tlogger.log('[ibc-js] Found cc query function: ', name);\r\n\t\tibc.chaincode.details.func.query.push(name);\r\n\t\tibc.chaincode.query[name] = function(args, enrollId, cb){\t\t\t\t\t//create the function in the chaincode obj\r\n\t\t\tif(typeof enrollId === 'function'){ \t\t\t\t\t\t\t\t\t//if cb is in 2nd param use known enrollId\r\n\t\t\t\tcb = enrollId;\r\n\t\t\t\tenrollId = ibc.chaincode.details.peers[ibc.selectedPeer].enrollId;\r\n\t\t\t}\r\n\t\t\tif(enrollId == null) {\t\t\t\t\t\t\t\t\t\t\t\t\t//if enrollId not provided, use known valid one\r\n\t\t\t\tenrollId = ibc.chaincode.details.peers[ibc.selectedPeer].enrollId;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar options = {}, body = {};\r\n\r\n\t\t\toptions = {path: '/chaincode'};\r\n\t\t\tbody = {\r\n\t\t\t\tjsonrpc: '2.0',\r\n\t\t\t\tmethod: 'query',\r\n\t\t\t\tparams: {\r\n\t\t\t\t\ttype: 1,\r\n\t\t\t\t\tchaincodeID:{\r\n\t\t\t\t\t\tname: ibc.chaincode.details.deployed_name\r\n\t\t\t\t\t},\r\n\t\t\t\t\tctorMsg: {\r\n\t\t\t\t\t\tfunction: name,\r\n\t\t\t\t\t\targs: args\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsecureContext: enrollId\r\n\t\t\t\t},\r\n\t\t\t\tid: Date.now()\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\trest.post(options, null, body, function(statusCode, data){\r\n\t\t\t\tif(statusCode != null){\r\n\t\t\t\t\tlogger.error('[ibc-js]', name, ' - failure:', statusCode, data);\r\n\t\t\t\t\tif(cb) cb(helper.eFmt('query() error', statusCode, data), null);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tlogger.log('[ibc-js]', name, ' - success:', data);\r\n\t\t\t\t\tif(cb){\r\n\t\t\t\t\t\tif(data){\r\n\t\t\t\t\t\t\tif(data.error) cb(helper.eFmt('query() resp error', 400, data.error), null);\r\n\t\t\t\t\t\t\telse if(data.result) cb(null, data.result.message);\r\n\t\t\t\t\t\t\telse cb(null, data.OK);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse cb(helper.eFmt('query() resp error', 502, data), null);\t\t//something is wrong, response is not what we expect\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t};\r\n\t}\r\n}\r\n\r\nmodule.exports = ibc;\r\n","/home/travis/build/npmtest/node-npmtest-ibm-blockchain-js/node_modules/ibm-blockchain-js/lib/rest.js":"'use strict';\r\n/* global Buffer */\r\n/*******************************************************************************\r\n * Copyright (c) 2015 IBM Corp.\r\n *\r\n * All rights reserved. \r\n *\r\n * Contributors:\r\n *   David Huffman - Initial implementation\r\n *******************************************************************************/\r\n/*\r\n\tVersion: 0.7.3\r\n\tUpdated: 11/03/2016\r\n\t-----------------------------------------------------------------\r\n\tUse:\tvar rest = require('./rest');\r\n\t\t\trest.init({quiet: false});\t\t\t\t\t\t//set default values here for all calls of 'rest'\r\n\t\t\tvar options = {\t\t\t\t\t\t\t\t\t//set options here for this call (overrides init)\r\n\t\t\t\thost: HOST_HERE,\r\n\t\t\t\tpath: PATH HERE,\r\n\t\t\t\theaders: {\"Accept\": \"application/json\"}\r\n\t\t\t};\r\n\t\t\trest.get(options, null, function(errCode, response){\r\n\t\t\t\tif(errCode != null) logger.log('Get - failure', errCode, response);\r\n\t\t\t\telse logger.log('Get - success', response);\r\n\t\t\t});\r\n\t\t\t\r\n\t-----------------------------------------------------------------\r\n\t\r\n\tValid \"options\" values: (these are default ones that come from requests module)\r\n\t-----------------------------------------------------------------\r\n\thost: A domain name or IP address of the server to issue the request to. Defaults to 'localhost'.\r\n\thostname: To support url.parse() hostname is preferred over host\r\n\tport: Port of remote server. Defaults to 80.\r\n\tlocalAddress: Local interface to bind for network connections.\r\n\tsocketPath: Unix Domain Socket (use one of host:port or socketPath)\r\n\tmethod: A string specifying the HTTP request method. Defaults to 'GET'.\r\n\tpath: Request path. Defaults to '/'. Should include query string if any. E.G. '/index.html?page=12'.\r\n\t\t\t An exception is thrown when the request path contains illegal characters. Currently, only spaces are rejected but that may change in the future.\r\n\theaders: An object containing request headers.\r\n\tauth: Basic authentication i.e. 'user:password' to compute an Authorization header.\r\n\tagent: Controls Agent behavior. When an Agent is used request will default to Connection: keep-alive. Possible values:\r\n\t\tundefined (default): use global Agent for this host and port.\r\n\t\tAgent object: explicitly use the passed in Agent.\r\n\t\tfalse: opts out of connection pooling with an Agent, defaults request to Connection: close.\r\n\tkeepAlive: {Boolean} Keep sockets around in a pool to be used by other requests in the future. Default = false\r\n\tkeepAliveMsecs: {Integer} When using HTTP KeepAlive, how often to send TCP KeepAlive packets over sockets being kept alive. \r\n\t\tDefault = 1000. Only relevant if keepAlive is set to true.\r\n\t\r\n\tPlus my \"options\" values:\r\n\t-----------------------------------------------------------------\r\n\tquiet: If true will not print to logger. Defaults false.\r\n\ttls: Iff false will use http instead of https. Defaults true.\r\n\ttimeout: Integer in milliseconds to time out requests. Defaults 20,000\r\n\tinclude_headers: If true the response argument will be {\"response\":<response>, \"headers\":<headers>} \r\n*/\r\n\r\nvar https_mod = require('https');\r\nvar http_mod = require('http');\r\nvar querystring = require('querystring');\r\nvar default_options = \t{\r\n\t\t\t\t\t\t\tquiet: false,\r\n\t\t\t\t\t\t\ttls: true,\r\n\t\t\t\t\t\t\ttimeout: 20000,\r\n\t\t\t\t\t\t\tinclude_headers: false\r\n\t\t\t\t\t\t};\r\nvar logger = {log: console.log, error: console.error, debug: console.log, warn: console.log};\r\n\r\n//is the obj empty or not\r\nfunction isEmpty(obj) {\r\n\tfor(var prop in obj) {\r\n\t\tif(obj.hasOwnProperty(prop))\r\n\t\t\treturn false;\r\n\t}\r\n\treturn true;\r\n}\r\n\r\n//merge fields in obj B to obj A only if they don't exist in obj A\r\nfunction mergeBtoA(b, a){\r\n\tfor(var i in b){\r\n\t\tif(a[i] === undefined) {\r\n\t\t\ta[i] = JSON.parse(JSON.stringify(b[i]));\r\n\t\t}\r\n\t}\r\n\treturn a;\r\n}\r\n\r\n//main http request builder/handler/thingy\r\nfunction http_req(options, query_params, body, attempt, cb){\r\n\tvar acceptJson = false, http, http_txt = '', request = null, formatted_body = null;\r\n\tvar ids = 'abcdefghijkmnopqrstuvwxyz';\r\n\tvar id = ids[Math.floor(Math.random() * ids.length)];\t\t\t\t\t\t\t\t//random letter to help id calls when there are multiple rest calls\r\n\tvar cb_fired = false;\r\n\t\r\n\tif(!attempt || isNaN(attempt)) attempt = 1;\t\t\t\t\t\t\t\t\t\t\t//defaults to attempt # 1\r\n\toptions = mergeBtoA(default_options, options);\r\n\t\r\n\t// ----- Handle Call Back ----- //\r\n\tfunction call_cb(ret){\r\n\t\tif(cb_fired === false){\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//only call cb once!\r\n\t\t\tcb_fired = true;\r\n\t\t\tif(options.include_headers) ret.msg = {response:ret.msg, headers: ret.headers};\r\n\t\t\tif(ret.code <= 399 && ret.code !== 302) ret.code = null;\r\n\t\t\tif(cb) cb(ret.code, ret.msg);\t\t\t\t\t\t\t\t\t\t\t\t//1st arg is error status code, null if no error code\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n\r\n\t// ---- Pick HTTP vs HTTPS ---- //\r\n\tif(options.ssl === false || options.tls === false) {\r\n\t\thttp = http_mod;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//if options.tls === false use http\r\n\t\thttp_txt = '[http ' + options.method + ' - ' + id + ']';\r\n\t}\r\n\telse{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//else use https\r\n\t\thttp = https_mod;\r\n\t\thttp_txt = '[https ' + options.method + ' - ' + id + ']';\r\n\t}\r\n\r\n\tif(!options.quiet) logger.debug(http_txt + ' ' + options.host + ':' + options.port);\r\n\tif(!options.quiet) logger.debug(http_txt + ' ' + options.path);\r\n\t\r\n\t// ---- Sanitize Inputs ---- //\r\n\tif(!options.headers) options.headers = {};\r\n\tfor(var i in options.headers) {\t\t\t\t\t\t\t\t\t\t\t\t\t\t//convert all header keys to lower-case for easier parsing\r\n\t\tvar temp = options.headers[i];\r\n\t\tdelete options.headers[i];\r\n\t\tif(temp != null){\r\n\t\t\toptions.headers[i.toLowerCase()] = temp;\r\n\t\t}\r\n\t}\r\n\t\r\n\tif(typeof body === 'object' && body != null){\r\n\t\toptions.headers['content-type'] = 'application/json';\r\n\t\tformatted_body = JSON.stringify(body);\t\t\t\t\t\t\t\t\t\t\t\t\t//stringify body\r\n\t}\r\n\telse formatted_body = body;\r\n\t\r\n\tif(options.headers.accept && options.headers.accept.indexOf('json') >= 0) acceptJson = true;\r\n\tif(query_params && typeof query_params === 'object') options.path += '?' + querystring.stringify(query_params);\r\n\r\n\tif(formatted_body) options.headers['content-length'] = Buffer.byteLength(formatted_body);\r\n\telse if(options.headers['content-length']) delete options.headers['content-length'];\t\t//we don't need you\r\n\r\n\tif(!options.quiet && options.method.toLowerCase() !== 'get') logger.debug('  body:', formatted_body);\r\n\t\t\r\n\t// --------- Handle Request --------- //\r\n\trequest = http.request(options, function(resp) {\r\n\t\tvar str = '', chunks = 0;\r\n\t\tif(!options.quiet) logger.debug(http_txt + ' Status code: ' + resp.statusCode);\r\n\t\t\r\n\t\tresp.setEncoding('utf8');\r\n\t\tresp.on('data', function(chunk) {\t\t\t\t\t\t\t\t\t\t\t\t\t\t//merge chunks of request\r\n\t\t\tstr += chunk;\r\n\t\t\tchunks++;\r\n\t\t});\r\n\t\tresp.on('end', function() {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//wait for end before decision\r\n\t\t\tvar ret = \t{\r\n\t\t\t\t\t\t\tcode: resp.statusCode,\r\n\t\t\t\t\t\t\theaders: resp.headers,\r\n\t\t\t\t\t\t\tmsg: str\r\n\t\t\t\t\t\t};\r\n\r\n\t\t\t// --------- Process Response - Debug Msgs --------- //\r\n\t\t\tif(resp.statusCode == 204){\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//empty response, don't parse body\r\n\t\t\t\tif(!options.quiet) logger.debug(http_txt + ' Data: No Content');\r\n\t\t\t}\r\n\t\t\telse if(resp.statusCode === 302){\t\t\t\t\t\t\t\t\t\t\t\t\t//redirect\r\n\t\t\t\tif(!options.quiet) logger.error(http_txt + ' Error - got a redirect, not what we want');\r\n\t\t\t}\r\n\t\t\telse if(resp.statusCode >= 200 && resp.statusCode <= 399){\t\t\t\t\t\t\t//valid status codes\r\n\t\t\t\tif(acceptJson){\r\n\t\t\t\t\ttry{\r\n\t\t\t\t\t\tret.msg = JSON.parse(str);\t\t\t\t\t\t\t\t\t\t\t\t//all good [json resp]\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(e){\r\n\t\t\t\t\t\tif(!options.quiet) logger.error(http_txt + ' Error - response is not JSON: ', str);\r\n\t\t\t\t\t\tret.code = 500;\r\n\t\t\t\t\t\tret.msg = 'Invalid JSON response: ' + str;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//all good [not json resp]\r\n\t\t\t\t\tif(!options.quiet) logger.debug(http_txt + ' Data:', str);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//invalid status codes\r\n\t\t\t\tif(!options.quiet) logger.error(http_txt + ' Error - status code: ' + resp.statusCode, str);\r\n\t\t\t\tif(acceptJson){\r\n\t\t\t\t\ttry{\r\n\t\t\t\t\t\tret.msg = JSON.parse(str);\t\t\t\t\t\t\t\t\t\t\t\t//attempt to parse error for JSON\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(e){}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// --------- Call CallBack --------- //\r\n\t\t\treturn call_cb(ret);\r\n\t\t});\r\n\t});\r\n\t\r\n\t// --------- Handle Request Errors --------- //\r\n\trequest.on('error', function(e) {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//handle error event\r\n\t\tif(e.code === 'ECONNRESET' && attempt <= 3) {\t\t\t\t\t\t\t\t\t\t\t//try ECONNRESETs again\r\n\t\t\tif(cb_fired === false){\r\n\t\t\tlogger.warn(http_txt + ' Warning - detected ECONNRESET, will try HTTP req again. attempt:' + attempt);\r\n\t\t\tattempt++;\r\n\t\t\t\tcb_fired = true;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//set this just in case\r\n\t\t\t\tsetTimeout(function(){ http_req(options, query_params, body, attempt, cb); }, 250 * Math.pow(2, attempt+1));\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif(!options.quiet) logger.error(http_txt + ' Error - unknown issue with request: ', e);//catch failed request (failed DNS lookup and such)\r\n\t\t\treturn call_cb({code: 500, headers: null, msg: e});\r\n\t\t}\r\n\t});\r\n\t\r\n\t// --------- Handle Request Timeouts --------- //\r\n\trequest.setTimeout(Number(options.timeout) || default_options.timeout);\r\n\trequest.on('timeout', function(){\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//handle time out events\r\n\t\tif(!options.quiet) logger.error(http_txt + ' Error - request timed out');\r\n\t\treturn call_cb({code: 408, headers: null, msg: 'Request timed out'});\r\n\t});\r\n\t\r\n\t// ----- Body ----- //\r\n\tif(formatted_body && formatted_body !== '' && !isEmpty(formatted_body)){\r\n\t\trequest.write(formatted_body);\r\n\t}\r\n\trequest.end();\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//send the request\r\n}\r\n\r\n//load new default option values\r\nmodule.exports.init = function(opt, log_outputs){\r\n\tfor(var i in opt){\r\n\t\tdefault_options[i] = JSON.parse(JSON.stringify(opt[i]));\r\n\t}\r\n\t\r\n\tif(log_outputs && log_outputs.info) logger.log = log_outputs.info;\t\t//send normal logs here\r\n\tif(log_outputs && log_outputs.error) logger.error = log_outputs.error;\t//send error logs here\r\n\tif(log_outputs && log_outputs.warn) logger.warn = log_outputs.warn;\t\t//send warn logs here\r\n\tif(log_outputs && log_outputs.debug) logger.debug = log_outputs.debug;\t//send debug logs here\r\n};\r\n\r\n//http post\r\nmodule.exports.post = function (l_options, query_params, body, cb){\r\n\tl_options.method = 'POST';\r\n\thttp_req(l_options, query_params, body, 1 , cb);\r\n};\r\n\r\n//http put\r\nmodule.exports.put = function (l_options, query_params, body, cb){\r\n\tl_options.method = 'PUT';\r\n\thttp_req(l_options, query_params, body, 1 , cb);\r\n};\r\n\r\n//http delete\r\nmodule.exports.delete = function (l_options, query_params, body, cb){\r\n\tl_options.method = 'DELETE';\r\n\thttp_req(l_options, query_params, body, 1 , cb);\r\n};\r\n\r\n//http get\r\nmodule.exports.get = function (l_options, query_params, cb){\r\n\tl_options.method = 'GET';\r\n\thttp_req(l_options, query_params, null, 1 , cb);\r\n};\r\n\r\n//http head\r\nmodule.exports.head = function (l_options, query_params, cb){\r\n\tl_options.method = 'HEAD';\r\n\thttp_req(l_options, query_params, null, 1 , cb);\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-ibm-blockchain-js/node_modules/ibm-blockchain-js/lib/helper.js":"'use strict';\r\n/*******************************************************************************\r\n * Copyright (c) 2016 IBM Corp.\r\n *\r\n * All rights reserved.\r\n * \r\n *******************************************************************************/\r\nvar fs = require('fs');\r\nvar async = require('async');\r\nvar path = require('path');\r\n\r\n//==================================================================\r\n//eFmt() - format errors\r\n//==================================================================\r\nmodule.exports.eFmt = function eFmt(name, code, details){\t\t\t\t\t\t\t//my error format\r\n\treturn \t{\r\n\t\tname: String(name),\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//error short name\r\n\t\tcode: Number(code),\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//http code when applicable\r\n\t\tdetails: details\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t//error description\r\n\t};\r\n};\r\n\r\n\r\n//==================================================================\r\n//filter_users() - return only client level enrollId - [1=client, 2=nvp, 4=vp, 8=auditor accurate as of 2/18]\r\n//==================================================================\r\nmodule.exports.filter_users = function(users){\t\t\t\t\t\t\t\t\t\t//this is only needed in a permissioned network\r\n\tvar valid_users = [];\r\n\tfor(var i = 0; i < users.length; i++) {\r\n\t\tif(users[i].enrollId.indexOf('user_type1') === 0){\t\t\t\t\t\t\t//type should be 1 for client\r\n\t\t\tvalid_users.push(users[i]);\r\n\t\t}\r\n\t}\r\n\treturn valid_users;\r\n};\r\n\r\n// ============================================================================================================================\r\n//removeThing() - clear the temp directory\r\n// ============================================================================================================================\r\nmodule.exports.removeThing = function(dir, cb){\r\n\t//console.log('!', dir);\r\n\tfs.readdir(dir, function (err, files) {\r\n\t\tif(err != null || !files || files.length === 0){\r\n\t\t\tcb();\r\n\t\t}\r\n\t\telse{\r\n\t\t\tasync.each(files, function (file, cb) {\t\t\t\t\t\t\t//over each thing\r\n\t\t\t\tfile = path.join(dir, file);\r\n\t\t\t\tfs.stat(file, function(err, stat) {\r\n\t\t\t\t\tif (err) {\r\n\t\t\t\t\t\tif(cb) cb(err);\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (stat.isDirectory()) {\r\n\t\t\t\t\t\tmodule.exports.removeThing(file, cb);\t\t\t\t//keep going\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\t//console.log('!', dir);\r\n\t\t\t\t\t\tfs.unlink(file, function(err) {\r\n\t\t\t\t\t\t\tif (err) {\r\n\t\t\t\t\t\t\t\tif(cb) cb(err);\r\n\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t//console.log('good', dir);\r\n\t\t\t\t\t\t\tif(cb) cb();\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}, function (err) {\r\n\t\t\t\tif(err){\r\n\t\t\t\t\tif(cb) cb(err);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tfs.rmdir(dir, function (err) {\r\n\t\t\t\t\tif(cb) cb(err);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\t});\r\n};"}